
------------------------------------------- annotation 설명 -------------------------------------------
                                Ctrl + F > Search
------------------------------------------------------------------------------------------------------
@SpringBootApplication
- @Configuration, @EnableAutoConfiguration, @ComponentScan 세 개를 합친 어노테이션
- @componentScan을 포함하고 있기에 bean을 만들 시 해당 어노테이션이 존재하는 패키지와 그 하위 패키지들을 scan 하게 되는 것

@RestController
- Spring MVC Controlle에 @ResponseBody가 추가된 것
- 주 용도는 Json 형태로 객체 데이터를 반환할 때 사용

@RequestMapping
- URL을 컨트롤러의 메서드와 매핑할 때 사용하는 annotation
- 클래스나 메서드 선언부에 @RequestMapping과 함께 URL을 명시하여 사용

@GetMapping
- HTTP GET 요청을 특정 핸들러 메소드에 맵핑하기 위한 annotation
- 주소에 파라미터가 노출됨
- Header에 정보를 담아 보내므로 용량에 한계가 있어 정보 호출에 주로 사용
- 주로 ‘select’ 동작에 사용

@PostMapping
- 주소창에 파라미터가 노출되지 않음
- HttpBody에 정보를 담아 보내므로 Get 방식보다 안전하여 새로운 정보를 등록할 때 주로 사용
- 메소드에 대해 똑같은 주소 매칭은 에러 발생
- 주로 ‘create’ 동작에 사용

@PutMapping
- 요청 페이로드를 사용해 새로운 리소스를 생성하거나, 대상 리소스를 나타내는 데이터를 대체함
- 주로 ‘update’ 동작에 사용
- PostMapping과의 차이는 멱등성으로, Put은 멱등성을 갖음 > Put은 한 번을 보내든 여러번을 보내든 같은 효과를 보임 (부수 효과가 없음)

@DeleteMapping
- 정보 삭제시 주로 사용
- ‘delete’ 동작

@Autowired
- 의존성 주입을 위해 사용
- 필요한 의존 객체의 ‘타입’에 해당하는 빈을 찾아 주입
- 해당 annotation을 부여하면 각 상황의 타입에 맞는 IoC컨테이너 안에 존재하는 Bean을 자동으로 주입해줌

@Slf4j
- 로깅에 대한 추상 레이어를 제공하는 인터페이스의 모음 (로깅 Facade)
- 추후에 필요로 의해 로깅 라이브러리를 변경할 때 코드의 변경 없이 가능하게 해줌
- Simple Logging Facade for Java

@RequestBody & @ResponseBody
- 요청본문 & 응답본문
- 스프링 비동기 처리를 위해 사용
- 본문에 담기는 데이터 형식은 여러 가지가 있지만 가장 대표적으로 사용되는 것이 Json
- 비동기식 클라이언트-서버 통신을 위해 Json 형식의 데이터를 주고받기 위해 사용
- 스프링 MVC에서도 클라이언트에서 전송한 xml 데이터나 json 등 데이터를 컨트롤러에서 DOM객체나 자바 객체로 변환해서 송수신 할 수 있음
- @RequestBody annotation과 @ResponseBody annotation이 각각 HTTP요청 바디를 자바 객체로 변환하고 자바 객체를 다시 HTTP 응답 바디로 변환해 줌
- @RequestBody를 통해서 자바 객체로 conversion을 하는데, 이 때 HttpMessageConverter를 사용
- @ResponseBody가 붙은 파라미터에는 HTTP 요청의 본문 body 부분이 그대로 전달됨
- @RequestBody annotation이 붙은 파라미터에는 http요청의 본문(body)이 그대로 전달됨, 일반적인 get/post의 요청 파라미터라면 해당 annotation을 사용할 일이 없음. 반면에 xml이나 json 기반의 메시지를 사용하는 요청의 경우에는 해당 방법이 매우 유용. http 요청의 바디 내용을 통째로 자바 객체로 변환해서 매피된 메소드 파라미터로 전달해줌
- @ResponseBody는 자바 객체를 HTTP요청의 바디 내용으로 매핑하여 클라이언트로 전송. 해당 annotation을 사용하면 http요청 body를 자바 객체로 전달 받을 수 있음

@ExceptionHandler
- Controller, @RestController가 적용된 Bean내에서 발생하는 예외를 잡아서 하나의 메서드에서 처리해주는 기능을 함
- Return 타입이 자유로움
- @ExceptionHandler를 등록한 Controller에만 적용됨, 다른 Controller에서의 예외는 처리 불가

@ControllerAdvice
- @ExceptionHandler가 하나의 클래스에 대한 것이라면, 이것은 모든 @Controller 즉, 전역에서 발생할 수 있는 예외를 잡아 처리해주는 annotation

@RestControllerAdvice
- @ControllerAdvice와 동일한 기능을 수행하면서 @ResponseBody를 통해 객체를 리턴할 수도 있음
- ViewResolver를 통해서 예외 처리 페이지로 리다이렉트 시키려면 @ControllerAdvice만 사용해도 되고, API 서버여서 에러 응답으로 객체를 리턴해야한다면 @ResponseBody 어노테이션이 추가된 @RestControllerAdvice를 적용하면 됨
- @RestController에서 예외가 발생하든 @Controller에서 예외가 발생하든 @ControllerAdvice+@ExceptionHandler 조합으로 모두 캐치할 수 있고, @ResponseBody의 필요 여부에 따라 적용하면 된다는 것.

@Entity
- 테이블과의 매핑
- @Entity가 붙은 클래스는 JPA가 관리
- 해당 annotation이 붙은 클래스에는 다음 제약사항이 필요
1. 필드에 final, enum, interface, class를 사용할 수 없음
2. 생성자 중 기본 생성자가 반드시 필요함

@Table
- @Entity와 매핑할 테이블(DB)을 지정
- 생략 시 매핑한 엔티티 이름을 테이블 이름으로 사용

@Id
- JPA가 객체를 관리할 때 식별할 기본키를 지정함
@Column
- 객체 필드를 테이블 컬럼에 매핑

@DynamicUpdate
- JPA Entity에 사용하는 annotation
- 실제 값이 변경된 컬럼으로만 update 쿼리를 만드는 기능

@Query
- JPA가 제공하는 쿼리 메소드 기능
- 리파지토리 인터페이스 메소드에 쿼리를 직접 정의하는 것

@Modifying
- Not supperted for DML operations 에러 발생 시 해결 방법
- @Query annotation으로 작성된 수정, 삭제 쿼리 메소드를 사용할 때 필요
- 조회(select) 쿼리를 제외하고 데이터에 변경이 일어나는 insert, update, delete 쿼리에서 사용
- 주로 벌크 연산 시 사용

@Getter & @Setter
- 각각 접근자와 설정자 메소드를 작성해주는 Lombok annotation

@ToString
- Lombok annotation
- toString() 메소드를 생성

@AllArgsConstructor
- Lombok annotation
- 모든 필드 값을 파라미터로 받는 생성자를 만들어 줌

@NoArgsConstructor
- Lombok annotation
- 파라미터가 없는 기본 생성자 생성

@RequiredArgsConstructor
- Lombok annotation
- 모든 멤버 변수를 초기화시키는 생성자를 생성
- final이나 @NonNull인 필드 값만 파라미터로 받는 생성자를 만들어 줌

@GeneratedValue
- 기본키의 값을 위한 자동 생성 전략을 명시하는데 사용
- 선택적 속성으로 generator와 strategy가 있음
- strategy : persistence provider가 엔티티의 기본키를 생성할 때 사용해야 하는 깁ㄴ키 생성 전략을 의미. 디폴트 값은 AUTO
- generator :SequenceGenerator나 TableGenerator annotation에서 명시된 기본키 생성자를 재사용할 때 쓰임. 디폴트 값은 (“”)

@Builder
- 다수의 필드를 갖는 복잡한 클래스의 경우, 생성자 대신 빌더를 사용하는 경우가 많음
- 이 때, 해당 어노테이션을 사용하면 자동으로 해당 클래스에 빌더를 추가해주어 편리함

@Controller, Service, Repository
- @Controller annotation을 붙이면 핸들러가 스캔할 수 있는 빈(Bean)객체가 되어 서블릿용 컨테이너에 생성됨
- 마찬가지로 service와 repository annotation은 해당 클래스를 루트 컨테이너에 빈(Bean) 객체로 생성해주는 annotation
- 모두 동일하게 Bean 객체를 생성해주는 기능이지만 명시적으로 구분하기 위해 각자 분리해서 사용함, 부모 annotation인 @Component를 붙여줘도 똑같이 루트 컨테이너에 생성되지만 가시성이 떨어지기에 잘 사용하지 않음
- 컨트롤러 : @Controller (프레젠테이션 레이어, 웹 요청과 응답을 처리함)
- 로직 처리 :  @Service (서비스 레이어, 내부에서 자바 로직을 처리함)
- 외부 I/O 처리 : @Repository (퍼시스턴스 레이어, DB나 파일같은 외부 I/O 작업을 처리)

@Transactional
- @Transactional(rollbackFor = Exception.class)를 붙여야 롤백이 수행됨
- 선언적 트랜잭션, 적용 범위에 트랜잭션 기능이 포함된 프록시 객체가 생성되어 자동으로 commit 혹은 rollback을 진행
- 모든 작업이 수행되어야 적용되며, 처리 중 오류 발생시 모든 작업들을 원상태로 되돌릴 수 있음

------------------------------------------------------------------------------------------------------